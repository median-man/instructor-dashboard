{"version":3,"sources":["errors.js","bcs/bcsClient.js","bcs/bcsService.js","bcs/index.js","util/arrayUtil.js","util/classNames.js","Dashboard/Loader.js","Dashboard/OffCanvas.js","Dashboard/StudentTable.js","Dashboard/Overview.js","Dashboard/Cohorts.js","Dashboard/Dashboard.js","Dashboard/index.js","Login.js","PrivateRoute.js","TopBar.js","App.js","reportWebVitals.js","index.js"],"names":["NetworkError","code","message","Error","API_BASENAME","postJSON","endpoint","body","a","headers","fetch","method","JSON","stringify","res","ok","statusText","status","json","getJSON","BcsAuthToken","this","jwtDecode","minutesTimeout","creationTime","Date","parse","window","sessionStorage","removeItem","token","getItem","setItem","authToken","key","requestor","get","set","bcsClient","Map","expiresAt","now","authExpiresAt","email","password","errorCode","authenticationInfo","clear","enrollmentId","sessionId","assignmentId","idb","then","keys","filter","test","forEach","signOut","login","result","error","cohorts","isLoggedIn","me","enrollments","Enrollments","map","enrollment","id","course","name","startDate","endDate","courseId","students","cohortId","parseInt","Promise","all","sessions","assignments","studentMap","academicSess","calendarSessions","session","context","contextCode","sessionDetail","sessDetails","stuDetails","student","pick","attendance","totalAbsent","excusedAbsent","grades","absent","absence","startTime","excused","push","requiredAssignmentIds","calendarAssignments","assignment","required","assignmentDetail","assDetail","type","title","letterGrade","grade","submission","mark","bcsContext","createContext","pending","BcsProvider","children","useState","state","setState","bcsService","prevState","loginError","Provider","value","useBcs","useContext","useAsyncRequestor","isLoaded","load","compactArray","arr","val","classNamesFromArray","join","Loader","className","style","width","height","role","Header","onClose","CloseButton","Body","aria-label","onClick","OffCanvas","show","modalClassName","aria-live","tabIndex","aria-labelledby","visibility","Table","onSelectStudent","onHelp","sortCol","sortOrder","setSortState","sortedStudents","sortBy","reverse","maxWidth","verticalAlign","padding","cursor","TableHeader","onToggleSort","fieldName","current","StudentTableRow","headingConfig","label","headingProps","TableHeading","ariaSort","scope","aria-sort","onKeyUp","e","SortIcon","Icon","SortDown","SortUp","totalIncomplete","totalNotSubmitted","totalUngraded","totalMissedHW","trClassName","StudentTable","DashboardHelp","StudentDetails","AbsencesSection","HomeworkIssuesSection","absentSess","sess","length","formatDate","listItems","effectiveDueDate","HomeworkIssueItem","statusColor","badgeClassName","minWidth","Overview","useParams","offCanvasState","setOffCanvasState","useEffect","studentId","firstName","lastName","Array","from","values","totalGrades","MAX_ABSENCES","Cohorts","to","Dashboard","path","rememberEmail","Heading","FormControl","controlId","inputProps","htmlFor","RememberMeControl","Alert","maxHeight","transition","overflow","SubmitButton","btnProps","ButtonSpinner","aria-hidden","Login","history","useHistory","location","useLocation","remember","dirty","formState","setFormState","pathname","replace","handleInputChange","target","checked","handleSubmit","preventDefault","bcsCredentials","trim","onSubmit","marginBottom","borderBottomRightRadius","borderBottomLeftRadius","onChange","disabled","borderTopRightRadius","borderTopLeftRadius","isFormValid","PrivateRoute","rest","render","TopBar","App","basename","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0TAAaA,EAAb,kDACE,cAA6E,IAAD,EAA9DC,EAA8D,EAA9DA,KAA8D,IAAxDC,eAAwD,oCAAvBD,EAAuB,+CAC1E,cAAMC,IACDD,KAAOA,EAF8D,EAD9E,sBAAkCE,QCG5BC,EAAe,iDACfC,EAAQ,uCAAG,WAAOC,EAAUC,GAAjB,6BAAAC,EAAA,6DAAuBC,EAAvB,+BAAiC,GAAjC,SACGC,MAAMN,EAAeE,EAAU,CAC/CK,OAAQ,OACRF,QAAQ,aACN,eAAgB,oBACbA,GAELF,KAAMK,KAAKC,UAAUN,KAPR,WACTO,EADS,QASNC,GATM,sBAUP,IAAIf,EAAa,CAAEE,QAASY,EAAIE,WAAYf,KAAMa,EAAIG,SAV/C,gCAYRH,EAAII,QAZI,2CAAH,wDAeRC,EAAO,uCAAG,WAAOb,GAAP,6BAAAE,EAAA,6DAAiBC,EAAjB,+BAA2B,GAA3B,SACIC,MAAMN,EAAeE,EAAU,CAC/CK,OAAQ,MACRF,QAAQ,aACN,eAAgB,oBACbA,KALO,WACRK,EADQ,QAQLC,GARK,sBASN,IAAIf,EAAa,CACrBE,QAASY,EAAIE,YAAc,gBAC3BC,OAAQH,EAAIG,SAXF,gCAcPH,EAAII,QAdG,2CAAH,sD,uBAkBPE,E,mIAeJ,WACE,IAAK,YAAAC,KAAD,MACF,OAAQ,EAEV,MAAyCC,YAAU,YAAAD,KAAD,OAA1CE,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,aACxB,OAAwB,GAAjBD,EAAsB,IAAOE,KAAKC,MAAMF,K,sBAOjD,WACE,OAAO,YAAAH,KAAP,Q,mBAGF,WACEM,OAAOC,eAAeC,WAAW,e,iBAQnC,SAAIC,GACF,YAAAT,KAAA,MAAcS,M,kBAvCd,OAAOH,OAAOC,eAAeG,QAAQ,a,WAG5BD,GACT,OAAOH,OAAOC,eAAeI,QAAQ,YAAaF,G,0HA4DlD,MAAO,CAAEG,UAAU,YAACZ,KAAF,O,sGAkCHa,EAAKC,G,0EAChBrB,EAAM,YAAAO,KAAA,MAAYe,IAAIF,G,gCAEZC,I,OAAZrB,E,OACA,YAAAO,KAAA,MAAYgB,IAAIH,EAAKpB,G,gCAEhBA,G,uEA6DJ,IAAMwB,EAAY,I,qLAtHd,IAAIC,M,gDACA,IAAInB,I,+CAOjB,WACE,OAAO,YAAAC,KAAA,MAAgBmB,Y,sBAGzB,WACE,OAAOf,KAAKgB,MAAQpB,KAAKqB,gB,0DAc3B,WAAYC,EAAOC,GAAnB,eAAApC,EAAA,sEACoBH,EAAS,SAAU,CAAEsC,QAAOC,aADhD,YACQ9B,EADR,QAEU+B,UAFV,sBAGU,IAAI1C,MAAMW,EAAI+B,WAHxB,OAKE,YAAAxB,KAAA,MAAgBgB,IAAIvB,EAAIgC,mBAAmBb,WAL7C,gD,8EAWA,WACE,YAAAZ,KAAA,MAAY0B,QACZ,YAAA1B,KAAA,MAAgB0B,U,gBAyBlB,WAAM,IAAD,OACH,OAAO,YAAA1B,KAAP,MAAuB,MAAM,kBAAMF,EAAQ,MAAD,YAAQ,EAAR,Y,sBAS5C,SAAS6B,GAAe,IAAD,OACrB,OAAO,YAAA3B,KAAP,yBAAmC2B,IAAgB,kBACjD3C,EAAS,YAAa,CAAE2C,gBAAhB,YAAgC,EAAhC,Y,2BAUZ,SAAcC,GAAY,IAAD,OACvB,OAAO,YAAA5B,KAAP,8BAAwC4B,IAAa,kBACnD5C,EAAS,iBAAkB,CAAE4C,aAArB,YAAkC,EAAlC,Y,yBAUZ,SAAYD,GAAe,IAAD,OACxB,OAAO,YAAA3B,KAAP,4BAAsC2B,IAAgB,kBACpD3C,EAAS,eAAgB,CAAE2C,gBAAnB,YAAmC,EAAnC,Y,8BAUZ,SAAiBE,GAAe,IAAD,OAC7B,OAAO,YAAA7B,KAAP,iCAA2C6B,IAAgB,kBACzD7C,EAAS,oBAAqB,CAAE6C,gBAAxB,YAAwC,EAAxC,c,uBCjMdC,MAEGC,MAAK,SAACC,GAAD,OACJA,EAAKC,QAAO,SAACpB,GAAD,MAAS,OAAOqB,KAAKrB,MAAMsB,SAAQ,SAACtB,GAAD,OAASiB,IAAQjB,SAG7D,IAAMuB,EAAU,kBAAMnB,EAAUmB,WAI1BC,EAAK,uCAAG,+BAAAlD,EAAA,6DAASmC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAAhB,kBAEXN,EAAUoB,MAAMf,EAAOC,GAFZ,gCAGV,CAAEe,QAAQ,IAHA,uCAKjBF,IALiB,kBAMV,CAAEG,MAAK,OANG,yDAAH,sDAULC,EAAO,uCAAG,gCAAArD,EAAA,kEAEd8B,EAAUwB,WAFI,sBAGX,IAAI3D,MAAM,4CAHC,uBAKwBmC,EAAUyB,KALlC,mBAKEC,EALF,EAKXC,YALW,sBAOX,IAAI9D,MAAM,+BAPC,cASbwD,EAASK,EAAYE,KAAI,SAACC,GAC9B,IAAMnB,EAAemB,EAAWC,GAChC,EAAmDD,EAAWE,OAC9D,MAAO,CAAEC,KADT,EAAQA,KACOC,UADf,EAAcA,UACYC,QAD1B,EAAyBA,QACUC,SADnC,EAAkCL,GACWpB,mBAZ5B,kBAcZ,CAAEW,WAdU,yCAgBA,MAAf,KAAM1D,OACR,KAAMC,QAAU,kBAChBuD,KAlBiB,kBAoBZ,CAAEG,MAAK,OApBK,0DAAH,qDAwBPc,EAAQ,uCAAG,6CAAAlE,EAAA,yDAASmE,EAAT,EAASA,SAAT,SAEfrC,EAAUwB,WAFK,sBAGZ,IAAI3D,MAAM,4CAHE,cAKd6C,EAAe4B,SAASD,GALV,SAMkBE,QAAQC,IAAI,CAChDxC,EAAUyC,SAAS/B,GACnBV,EAAU0C,YAAYhC,KARJ,0CAMb+B,EANa,KAMHC,EANG,KAUdC,EAAa,IAAI1C,IAGjB2C,EAAeH,EAASI,iBAC3B7B,QAAO,SAAC8B,GAAD,MAA6C,aAAhCA,EAAQC,QAAQC,eACpCpB,KAAI,SAACkB,GAAD,OAAaA,EAAQA,QAAQhB,MAfhB,UAiBSS,QAAQC,IACnCI,EAAahB,KAAI,SAACjB,GAAD,OAAeX,EAAUiD,cAActC,OAlBtC,sBAsBLO,SAAQ,SAACgC,GACtBA,EAAYd,SAASlB,SAAQ,SAACiC,GAAgB,IAAD,EACrCvD,EAAMuD,EAAWC,QAAQtB,GAC3BsB,EAAUT,EAAW7C,IAAIF,GACxBwD,KACHA,EAAUC,IAAKF,EAAWC,QAAS,CACjC,KACA,QACA,YACA,WACA,YAEME,WAAa,GACrBF,EAAQG,YAAc,EACtBH,EAAQI,cAAgB,EACxBJ,EAAQK,OAAS,GACjBd,EAAW5C,IAAIH,EAAKwD,IAGtB,IAAME,EAAa,CACjBI,SAAUP,EAAWQ,QACrBC,UAAWV,EAAYJ,QAAQA,QAAQc,UACvCC,SAAS,UAAAV,EAAWQ,eAAX,eAAoBE,WAAW,GAEtCP,EAAWI,QAAUJ,EAAWO,UAClCT,EAAQI,eAAiB,GAEvBF,EAAWI,SACbN,EAAQG,aAAe,GAEzBH,EAAQE,WAAWQ,KAAKR,SAKtBS,EAAwBrB,EAAYsB,oBACvChD,QAAO,SAACiD,GAAD,OAAgBA,EAAWC,YAClCtC,KAAI,SAACqC,GAAD,OAAgBA,EAAWnC,MA3Dd,UA6DYS,QAAQC,IACtCuB,EAAsBnC,KAAI,SAAChB,GAAD,OACxBZ,EAAUmE,iBAAiBvD,OA/DX,sBAmEFM,SAAQ,SAACkD,GACzB,IAAMH,EAAaZ,IAAKe,EAAUH,WAAY,CAC5C,KACA,UACA,mBACA,UAEFA,EAAWI,KAAO,WAAWpD,KAAKgD,EAAWK,OACzC,UACA,WAEJF,EAAUhC,SAASlB,SAAQ,SAACkC,GAAa,IAAD,EAC9BtB,EAAOsB,EAAQA,QAAftB,GACFyC,EAAW,UAAGnB,EAAQoB,aAAX,aAAG,EAAeA,MAC7BA,EAAQ,CACZP,aACAtF,OAAQ4F,EACJ,SACAnB,EAAQqB,WACR,WACA,gBACJC,KAAMH,GAAe,IAED5B,EAAW7C,IAAIgC,GACvB2B,OAAOK,KAAKU,SA3FV,kBA+Fb,CAAEnD,OAAQsB,IA/FG,2DAiGb,CAAErB,MAAK,OAjGM,0DAAH,sD,OC/CfqD,EAAaC,wBAAc,CAC/BpD,YAAY,EACZqD,SAAS,EACT1D,QAAS,aACTC,MAAO,YAAyB,EAAtBf,MAAsB,EAAfC,UACjBiB,QAAS,eAGJ,SAASuD,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SAC5B,EAA0BC,oBAAS,iBAAO,CACxC1D,MAAO,GACPuD,SAAS,EACTrD,WDD4BxB,EAAUwB,eCFxC,mBAAOyD,EAAP,KAAcC,EAAd,KAMM/D,EAAO,uCAAG,sBAAAjD,EAAA,sDACdiH,IACAD,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgC5D,YAAY,OAFvC,2CAAH,qDAKP6D,EAAa,SAAC/D,GAClB,OAAO4D,GAAS,SAACE,GAAD,mBAAC,eACZA,GADW,IAEdP,SAAS,EACTrD,YAAY,EACZF,cAIEF,EAAK,uCAAG,mCAAAlD,EAAA,6DAASmC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,SAC5B4E,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgCP,SAAS,OADtC,SAEYM,EAAiB,CAAE9E,QAAOC,aAFtC,mBAGW,yBAAd,QADDgB,EAFI,EAEJA,aACC,IAALA,OAAA,EAAAA,EAAO1D,SAHC,yCAIHyH,EAAW,iCAJR,WAMR/D,EANQ,0CAOH+D,EAAW,oDAPR,QASZH,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPP,SAAS,EACTrD,YAAY,EACZF,MAAO,QAbG,4CAAH,sDAiBX,OACE,cAACqD,EAAWW,SAAZ,CAAqBC,MAAK,2BAAON,GAAP,IAAc7D,QAAOD,YAA/C,SACG4D,IAKA,IAAMS,EAAS,kBAAMC,qBAAWd,IAEjCe,EAAoB,SAAC7F,GACzB,MAA0BmF,mBAAS,CACjCH,SAAS,EACTxD,OAAQ,KACRC,MAAO,KACPqE,UAAU,IAJZ,mBAAOV,EAAP,KAAcC,EAAd,KAMMU,EAAI,uCAAG,gCAAA1H,EAAA,0DACP+G,EAAMU,WAAYV,EAAMJ,QADjB,wDAEXK,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgCP,SAAS,OAFvC,SAGqBhF,IAHrB,gBAGHwB,EAHG,EAGHA,OAAQC,EAHL,EAGKA,MAChB4D,EAAS,CAAE7D,SAAQC,QAAOuD,SAAS,EAAOc,UAAU,IAJzC,2CAAH,qDAMV,OAAO,2BAAKV,GAAZ,IAAmBW,U,QCtERC,EAAe,SAACC,GAAD,OAASA,EAAI9E,QAAO,SAAC+E,GAAD,OAASA,MCC5CC,EAAsB,SAACF,GAAD,OAASD,EAAaC,GAAKG,KAAK,MCWpDC,MAbf,YAA+B,IAAbnB,EAAY,EAAZA,SAChB,OACE,sBAAKoB,UAAU,2EAAf,UACE,qBACEC,MAAO,CAAEC,MAAO,SAAUC,OAAQ,UAClCH,UAAU,qCACVI,KAAK,WAEP,mBAAGJ,UAAU,OAAb,SAAqBpB,QCgB3B,SAASyB,GAAT,GAAwC,IAAtBC,EAAqB,EAArBA,QAAS1B,EAAY,EAAZA,SACzB,OACE,sBAAKoB,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAkBrE,GAAG,iBAAnC,SACGiD,IAEH,cAAC2B,GAAD,CAAaD,QAASA,OAK5B,SAASE,GAAT,GAA6B,IAAb5B,EAAY,EAAZA,SACd,OAAO,qBAAKoB,UAAU,uBAAf,SAAuCpB,IAGhD,SAAS2B,GAAT,GAAmC,IAAZD,EAAW,EAAXA,QACrB,OACE,wBACEpC,KAAK,SACL8B,UAAU,uBACVS,aAAW,QACXC,QAASJ,IAKAK,OAhDf,YAA+D,IAA1CC,EAAyC,EAAzCA,KAAMX,EAAmC,EAAnCA,MAAO9B,EAA4B,EAA5BA,MAAOmC,EAAqB,EAArBA,QAAS1B,EAAY,EAAZA,SAC1CiC,EAAiBhB,EAAoB,CACzC,YACA,gBACAe,GAAQ,SAGV,OACE,0BACEE,YAAU,SACVd,UAAWa,EACXE,UAAW,EACXpF,GAAG,YACHqF,kBAAgB,iBAChBf,MAAK,aAAIgB,WAAYL,EAAO,UAAY,UAAaX,GANvD,UAQE,cAACI,GAAD,CAAQC,QAASA,EAAjB,SAA2BnC,IAC3B,cAACqC,GAAD,UAAO5B,Q,sCCJb,SAASsC,GAAT,GAAuD,IAAtCjF,EAAqC,EAArCA,SAAUkF,EAA2B,EAA3BA,gBAAiBC,EAAU,EAAVA,OAC1C,EAA+CvC,mBAAS,CACtDwC,QAAS,OACTC,UAAW,IAFb,0BAASD,EAAT,EAASA,QAASC,EAAlB,EAAkBA,UAAaC,EAA/B,KAMMC,EAAiBC,KAAOxF,EAAUoF,IAErB,IAAfC,GACFE,EAAeE,UAajB,OACE,wBACE1B,UAAU,sDACVC,MAAO,CAAE0B,SAAU,SAFrB,UAIE,qFACiD,IAC/C,wBACE1B,MAAO,CAAE2B,cAAe,UAAWC,QAAS,EAAGC,OAAQ,QACvD9B,UAAU,eACVU,QAASU,EAHX,qBAQF,cAACW,GAAD,CACEV,QAASA,EACTC,UAAWA,EACXU,aA5BmB,SAACC,GACxBV,GAAa,SAACW,GAAD,MAAc,CACzBb,QAASY,EACTX,UAGEY,EAAQb,UAAYY,GAAiC,EAArBC,EAAQZ,UAAiB,SAwB3D,gCACGE,EAAe/F,KAAI,SAACwB,GAAD,OAClB,cAACkF,GAAD,CAEElF,QAASA,EACTkE,gBAAiBA,GAFZlE,EAAQtB,YAUzB,IAAMyG,GAAgB,CACpB,CACEC,MAAO,OACPJ,UAAW,QAEb,CACEI,MAAO,SACPJ,UAAW,eAEb,CACEI,MAAO,aACPJ,UAAW,mBAEb,CACEI,MAAO,gBACPJ,UAAW,qBAEb,CACEI,MAAO,YACPJ,UAAW,iBAEb,CACEI,MAAO,WACPJ,UAAW,kBAIf,SAASF,GAAT,GAA4D,IAArCV,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,UAAWU,EAAgB,EAAhBA,aACzC,OACE,gCACE,6BACGI,GAAc3G,KAAI,SAAC6G,GAAD,OACjB,cAACC,GAAD,aAEElB,QAASA,EACTC,UAAWA,EACXU,aAAcA,GACVM,GAJCA,EAAaL,kBAY9B,SAASM,GAAT,GAA+E,IAAvDjB,EAAsD,EAAtDA,UAAWD,EAA2C,EAA3CA,QAASgB,EAAkC,EAAlCA,MAAOJ,EAA2B,EAA3BA,UAAWD,EAAgB,EAAhBA,aAItDQ,EACJnB,IAAYY,EAAY,KAAqB,IAAdX,EAAkB,YAAc,aAEjE,OACE,oBAAImB,MAAM,MAAMC,YAAWF,EAA3B,SACE,uBACEzB,SAAU,EACVX,KAAK,SACLM,QAAS,kBAAMsB,EAAaC,IAC5BU,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEnJ,KAAmBuI,EAAaC,IAClDhC,MAAO,CAAE6B,OAAQ,WALnB,UAOGO,EAPH,IAOU,cAACQ,GAAD,CAAUvB,UAAWA,EAAWV,KAAMS,IAAYY,SAMlE,SAASY,GAAT,GAAwC,IAApBvB,EAAmB,EAAnBA,UACZrB,EAAQ,CAAEgB,WADqB,EAARL,KACM,UAAY,UACzCkC,EAAqB,IAAdxB,EAAkByB,KAAWC,KAC1C,OAAO,cAACF,EAAD,CAAMrC,aAAW,cAAcR,MAAOA,IAG/C,SAASkC,GAAT,GAAwD,IAA7BlF,EAA4B,EAA5BA,QAASkE,EAAmB,EAAnBA,gBAEhCxF,EAQEsB,EARFtB,GACAE,EAOEoB,EAPFpB,KACAuB,EAMEH,EANFG,YACA6F,EAKEhG,EALFgG,gBACAC,EAIEjG,EAJFiG,kBACAC,EAGElG,EAHFkG,cACAC,EAEEnG,EAFFmG,cACA5K,EACEyE,EADFzE,OAGI6K,EACO,OAAX7K,EACI,GACW,eAAXA,EACA,eACA,gBAEN,OACE,qBACE4H,KAAK,SACLJ,UAAWqD,EACX3C,QAAS,kBAAMS,EAAgBxF,IAC/BgH,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEnJ,KAAmB0H,EAAgBxF,IACrDoF,SAAU,EALZ,UAOE,6BAAKlF,IACL,6BAAKuB,IACL,6BAAK6F,IACL,6BAAKC,IACL,6BAAKE,IACL,6BAAKD,OAKIG,OAhLf,YAA8D,IAAtCrH,EAAqC,EAArCA,SAAUkF,EAA2B,EAA3BA,gBAAiBC,EAAU,EAAVA,OACjD,OACE,cAACF,GAAD,CACEjF,SAAUA,EACVkF,gBAAiBA,EACjBC,OAAQA,KC4Gd,SAASmC,KACP,OACE,qBAAIvD,UAAU,8BAAd,UACE,oBAAIA,UAAU,kBAAd,uFAIA,oBAAIA,UAAU,kBAAd,uGAQN,SAASwD,GAAT,GAAsC,IAAZvG,EAAW,EAAXA,QACxB,OACE,qCACE,cAACwG,GAAD,CAAiBtG,WAAYF,EAAQE,aACrC,cAACuG,GAAD,CAAuBpG,OAAQL,EAAQK,YAK7C,SAASmG,GAAT,GAA0C,IAClCE,EADiC,EAAdxG,WACKtC,QAAO,SAAC+I,GAAD,OAAUA,EAAKrG,UACpD,OACE,qCACE,0CAEE,qBAAIyC,UAAU,8BAAd,UACyB,IAAtB2D,EAAWE,QAAgB,qCAC3BF,EAAWlI,KAAI,SAACmI,GAAD,OACd,qBAAyB5D,UAAU,kBAAnC,UACG8D,YAAW,IAAI9K,KAAK4K,EAAKnG,WAAY,YAAa,IAClDmG,EAAKlG,SAAW,YAFVkG,EAAKnG,oBAW1B,SAASiG,GAAT,GAA4C,IAAXpG,EAAU,EAAVA,OAKzByG,EAAYrE,EAChBpC,EAAOzC,QALO,SAACwD,GAAD,OACI,WAAjBA,EAAM7F,QAAsC,MAAf6F,EAAME,OACpCvF,KAAKC,MAAMoF,EAAMP,WAAWkG,kBAAoBhL,KAAKgB,SAG9ByB,KAAI,SAAC4C,GAC1B,OAAO,cAAC4F,GAAD,CAAgD5F,MAAOA,GAA/BA,EAAMP,WAAWK,WAGpD,OACE,qCACE,oBAAI6B,UAAU,OAAd,6BACsB,IAArB+D,EAAUF,OACT,qCAEA,oBAAI7D,UAAU,8BAAd,SAA6C+D,OAMrD,SAASE,GAAT,GAAuC,IAAV5F,EAAS,EAATA,MACnBE,EAAiBF,EAAjBE,KAAM/F,EAAW6F,EAAX7F,OACN2F,EAAUE,EAAMP,WAAhBK,MAEJ5F,EAAa,gBACb2L,EAAc,SACL,MAAT3F,EACFhG,EAAa,aACO,aAAXC,IACTD,EAAa,WACb2L,EAAc,WAGhB,IAAMC,EAAiBtE,EAAoB,CACzC,QADyC,aAEnCqE,GACU,YAAhBA,GAA6B,cAG/B,OACE,qBAAIlE,UAAU,4CAAd,UACE,qBAAKC,MAAO,CAAEmE,SAAU,IAAxB,SACE,sBAAMpE,UAAWmE,EAAjB,SAAkC5L,MAEpC,qBAAKyH,UAAU,OAAf,SAAuB7B,OAKdkG,OAhLf,WACE,INsC0BnI,EMtClB3B,EAAiB+J,cAAjB/J,aACR,EAA4CsE,mBAAS,CACnD+B,MAAM,EACNzC,MAAO,GACPS,SAAU,OAHZ,mBAAO2F,EAAP,KAAuBC,EAAvB,KAKMvI,GNgCoBC,EMhCG3B,ENiC7BgF,GAAkB,kBAAMP,EAAoB,CAAE9C,iBM3B9C,OAJAuI,qBAAU,WACRxI,EAASwD,SACR,CAACxD,IAEAA,EAASd,MACJ,4BAAIc,EAASd,QAElBc,EAASyC,UAAYzC,EAASuD,SACzB,cAAC,EAAD,sCAwBP,qCACE,cAAC,GAAD,CACE4B,OApBa,WACjBoD,EAAkB,CAChB5D,MAAM,EACNzC,MAAO,iBACPS,SAAU,cAAC2E,GAAD,OAiBRpC,gBAbsB,SAACuD,GAC3B,IAAMzH,EAAUhB,EAASf,OAAOvB,IAAI+K,GACpCF,EAAkB,CAChB5D,MAAM,EACNzC,MAAM,GAAD,OAAKlB,EAAQ0H,UAAb,YAA0B1H,EAAQ2H,UACvChG,SAAU,cAAC4E,GAAD,CAAgBvG,QAASA,OASjChB,SAAU4I,MAAMC,KAAK7I,EAASf,OAAO6J,UAAUtJ,KAAI,SAACwB,GAClD,IAAQ0H,EAAyC1H,EAAzC0H,UAAWC,EAA8B3H,EAA9B2H,SAAUxH,EAAoBH,EAApBG,YAAazB,EAAOsB,EAAPtB,GACpCE,EAAI,UAAM8I,EAAN,YAAmBC,GAC7B,EA1EU,SAACtH,GACnB,IAAI2F,EAAkB,EAClBC,EAAoB,EACpBC,EAAgB,EAoBpB,OAnBA7F,EACGzC,QACC,SAACwD,GAAD,OAAWrF,KAAKC,MAAMoF,EAAMP,WAAWkG,kBAAoBhL,KAAKgB,SAEjEe,SAAQ,SAACsD,GACa,WAAjBA,EAAM7F,QAAsC,MAAf6F,EAAME,OAGpB,MAAfF,EAAME,KAIW,kBAAjBF,EAAM7F,OAIV2K,GAAiB,EAHfD,GAAqB,EAJrBD,GAAmB,MAUlB,CAAEA,kBAAiBC,oBAAmBC,gBAAeC,cADtCH,EAAkBC,GAyD5B8B,CAAY/H,EAAQK,QAJtB2F,EADF,EACEA,gBACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,cAYF,MAAO,CACLzH,KACAE,OACAuB,cACA6F,kBACAC,oBACAC,gBACAC,gBACA5K,OAhBE4E,EApFO,GAoFuBgG,EAAgB,EACvC,aACAhG,EAAc6H,GAAoB7B,EAAgB,EAClD,UAEA,WAef,cAAC,GAAD,aAAW9C,QAxDO,kBACpBkE,GAAkB,SAACvF,GAAD,mBAAC,eAAoBA,GAArB,IAAgC2B,MAAM,SAuDf2D,QC1E9BW,OAlCf,WACE,IAAM9J,EPoEwBmE,EAAkBP,GO/DhD,OAJAyF,qBAAU,WACRrJ,EAAQqE,SACP,CAACrE,IAEAA,EAAQsD,UAAYtD,EAAQoE,SACvB,cAAC,EAAD,iCAELpE,EAAQD,MACH,wDAA2BC,EAAQD,MAAM1D,WAEpB,IAA1B2D,EAAQF,OAAO2I,OACV,4DAEqB,IAA1BzI,EAAQF,OAAO2I,OACV,cAAC,IAAD,CAAUsB,GAAE,WAAM/J,EAAQF,OAAO,GAAGX,gBAG3C,qCACE,wDACCa,EAAQF,OAAOO,KAAI,gBAAGI,EAAH,EAAGA,KAAMtB,EAAT,EAASA,aAAT,OAClB,cAAC,IAAD,CAEE4K,GAAE,WAAM5K,GACRyF,UAAU,4BAHZ,SAKGnE,GAJItB,MAML,QCfK6K,IClBAA,GDGf,WACE,OACE,qBAAKpF,UAAU,8BAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqF,KAAK,iBAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,Y,kBEPJC,GAAgB,SAACpL,GAAD,OAAWQ,IAAQ,cAAeR,IAiHxD,SAASqL,KACP,OACE,oBAAIvF,UAAU,oBAAd,sDAMJ,SAASwF,GAAT,GAA2D,IAApCnD,EAAmC,EAAnCA,MAAOoD,EAA4B,EAA5BA,UAAcC,EAAc,sCACxD,OACE,sBAAK1F,UAAU,gBAAf,UACE,mCACEnE,KAAM4J,EACN9J,GAAI8J,EACJzF,UAAU,gBACN0F,IAEN,uBAAOC,QAASF,EAAhB,SAA4BpD,OAKlC,SAASuD,GAAT,GAA0D,IAA7BH,EAA4B,EAA5BA,UAAcC,EAAc,8BACvD,OACE,qBAAK1F,UAAU,mBAAf,SACE,kCACE,mCAAOnE,KAAM4J,EAAWvH,KAAK,YAAewH,IAD9C,oBAQN,SAASG,GAAT,GAAoC,IAAnBjH,EAAkB,EAAlBA,SAAUgC,EAAQ,EAARA,KACzB,OACE,qBACEZ,UAAU,OACVC,MAAO,CACL6F,UAAWlF,EAAO,IAAM,EACxBmF,WAAW,wBACXC,SAAU,SACV7F,OAAQ,QANZ,SASE,qBAAKH,UAAU,qBAAqBI,KAAK,QAAzC,SACGxB,MAMT,SAASqH,GAAT,GAAiD,IAAzBvH,EAAwB,EAAxBA,QAAYwH,EAAY,4BAC9C,OACE,gDACEhI,KAAK,SACL8B,UAAU,gCACNkG,GAHN,aAKGxH,EAAU,cAACyH,GAAD,4BAA+C,YAKhE,SAASA,GAAT,GAAsC,IAAbvH,EAAY,EAAZA,SACvB,OACE,qCACE,sBACEoB,UAAU,wCACVI,KAAK,SACLgG,cAAY,SAEbxH,KAKQyH,OAtLf,WACE,IAAMC,EAAUC,cACVC,EAAWC,cACjB,EAA8CpH,IAAtCpE,EAAR,EAAQA,MAAOI,EAAf,EAAeA,WAAYqD,EAA3B,EAA2BA,QAASvD,EAApC,EAAoCA,MACpC,EAAkC0D,mBAAS,CACzC3E,MAAO,GACPC,SAAU,GACVuM,UAAU,EACVC,OAAO,IAJT,mBAAOC,EAAP,KAAkBC,EAAlB,KAQApC,qBAAU,WACR,GAAIpJ,EAAY,CAAC,IAAD,IAERyJ,EAAO,CAAEgC,UAAU,UAAAN,EAAS1H,aAAT,mBAAgBgG,YAAhB,eAAsBgC,WAAY,KAC3DR,EAAQS,QAAQjC,MAEjB,CAACzJ,EAAYiL,EAASE,IAGzB/B,qBAAU,WA1BW/J,IAAQ,eA2BhBC,MAAK,SAACT,GAAD,OACd2M,GAAa,SAAC5H,GAAD,mBAAC,eACTA,GADQ,IAEXyH,WAAYxM,EACZA,MAAOA,GAAS,aAGnB,IAEH,IAAM8M,EAAoB,SAACpE,GACzB,MAAuCA,EAAEqE,OAAjCpL,EAAR,EAAQA,KAAMuD,EAAd,EAAcA,MAAOlB,EAArB,EAAqBA,KAAMgJ,EAA3B,EAA2BA,QAC3BL,GAAa,SAAC5H,GAAD,mBAAC,eACTA,GADQ,iBAEX0H,OAAO,GACN9K,EAAgB,aAATqC,EAAsBgJ,EAAU9H,QAStC+H,EAAY,uCAAG,WAAOvE,GAAP,qBAAA7K,EAAA,yDACnB6K,EAAEwE,iBACMlN,EAA8B0M,EAA9B1M,MAAOC,EAAuByM,EAAvBzM,SAAUuM,EAAaE,EAAbF,SACnBW,EAAiB,CACrBnN,MAAOA,EAAMoN,OACbnN,SAAUA,EAASmN,QAErBT,GAAa,SAAC5H,GAAD,mBAAC,eAAoBA,GAArB,IAAgC0H,OAAO,QAChDD,EARe,gCASXpB,GAAc+B,EAAenN,OATlB,+CAnDEQ,IAAQ,eAmDV,QAanBO,EAAMoM,GAba,4CAAH,sDAgBlB,OACE,sBACEpH,MAAO,CAAE0B,SAAU,KACnB3B,UAAU,qDAFZ,SAIE,uBAAMuH,SAAUJ,EAAhB,UACE,cAAC5B,GAAD,IACA,cAACC,GAAD,CACEnD,MAAM,gBACNnE,KAAK,QACLuH,UAAU,QACVxF,MAAO,CACLuH,cAAe,EACfC,wBAAyB,EACzBC,uBAAwB,GAE1BtI,MAAOwH,EAAU1M,MACjByN,SAAUX,EACVY,SAAUlJ,IAEZ,cAAC8G,GAAD,CACEnD,MAAM,WACNnE,KAAK,WACLuH,UAAU,WACVxF,MAAO,CACL4H,qBAAsB,EACtBC,oBAAqB,GAEvB1I,MAAOwH,EAAUzM,SACjBwN,SAAUX,EACVY,SAAUlJ,IAEZ,cAACkH,GAAD,CACEH,UAAU,WACVyB,QAASN,EAAUF,SACnBiB,SAAUX,EACVY,SAAUlJ,IAEZ,cAACuH,GAAD,CAAc2B,UA3DA,WAClB,IAAQ1N,EAA2B0M,EAA3B1M,MAAOC,EAAoByM,EAApBzM,SAAUwM,EAAUC,EAAVD,MACzB,OAAOzM,EAAMoN,QAAUnN,EAASmN,QAAUX,EAyDboB,IAAiBrJ,EAASA,QAASA,IAC5D,cAACmH,GAAD,CAAOjF,KAAMzF,IAAUyL,EAAUD,MAAjC,SAAyCxL,UCzFlC6M,OArBf,YAA8C,IAAtBpJ,EAAqB,EAArBA,SAAaqJ,EAAQ,6BACnC5M,EAAegE,IAAfhE,WACR,OACE,cAAC,IAAD,2BACM4M,GADN,IAEEC,OAAQ,gBAAG1B,EAAH,EAAGA,SAAH,OACNnL,EACEuD,EAEA,cAAC,IAAD,CACEuG,GAAI,CACF2B,SAAU,SACVhI,MAAO,CAAEgG,KAAM0B,WCSd2B,OApBf,WACE,MAAgC9I,IAAxBhE,EAAR,EAAQA,WAAYL,EAApB,EAAoBA,QACpB,OACE,yBAAQgF,UAAU,kDAAlB,UACE,cAAC,IAAD,CAAMA,UAAU,oBAAoBmF,GAAG,IAAvC,kCAGA,qBAAKnF,UAAU,0BAAf,SACE,qBAAKA,UAAU,WAAf,SACG3E,GACC,wBAAQ2E,UAAU,uBAAuBU,QAAS1F,EAAlD,8BCYGoN,OAlBf,WACE,OACE,cAACzJ,EAAD,UACE,eAAC,IAAD,CAAQ0J,SAAUC,wBAAlB,UACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOjD,KAAK,SAAZ,SACE,cAAC,GAAD,MAEF,cAAC,GAAD,CAAcA,KAAK,IAAnB,SACE,cAAC,GAAD,eCLGkD,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9N,MAAK,YAAkD,IAA/C+N,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASb,OACP,cAAC,IAAMc,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.17d3cf2a.chunk.js","sourcesContent":["export class NetworkError extends Error {\n  constructor({ code, message = `Request failed with ${code} status code.` }) {\n    super(message);\n    this.code = code;\n  }\n}\n","import jwtDecode from \"jwt-decode\";\nimport { NetworkError } from \"../errors\";\n\nconst API_BASENAME = \"https://www.bootcampspot.com/api/instructor/v1\";\nconst postJSON = async (endpoint, body, headers = {}) => {\n  const res = await fetch(API_BASENAME + endpoint, {\n    method: \"post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...headers,\n    },\n    body: JSON.stringify(body),\n  });\n  if (!res.ok) {\n    throw new NetworkError({ message: res.statusText, code: res.status });\n  }\n  return res.json();\n};\n\nconst getJSON = async (endpoint, headers = {}) => {\n  const res = await fetch(API_BASENAME + endpoint, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...headers,\n    },\n  });\n  if (!res.ok) {\n    throw new NetworkError({\n      message: res.statusText || \"Network error\",\n      status: res.status,\n    });\n  }\n  return res.json();\n};\n\n/** Class representing an auth token returned by BCS Instructor API. */\nclass BcsAuthToken {\n  get #token() {\n    return window.sessionStorage.getItem(\"authToken\");\n  }\n\n  set #token(token) {\n    return window.sessionStorage.setItem(\"authToken\", token);\n  }\n\n  /**\n   * Get the unix time stamp for the expiration date/time of the token. Returns\n   * -1 if there is no token.\n   *\n   * @returns {number} The unix time stamp (milliseconds)\n   */\n  get expiresAt() {\n    if (!this.#token) {\n      return -1;\n    }\n    const { minutesTimeout, creationTime } = jwtDecode(this.#token);\n    return minutesTimeout * 60 * 1000 + Date.parse(creationTime);\n  }\n\n  /**\n   *\n   * @returns {String} The token string.\n   */\n  toString() {\n    return this.#token;\n  }\n\n  clear() {\n    window.sessionStorage.removeItem(\"authToken\");\n  }\n\n  /**\n   * Sets the token\n   *\n   * @param {string} token token from bcs api\n   */\n  set(token) {\n    this.#token = token;\n  }\n}\n\n/**\n * Class which provides methods for accessing data from the BCS Instructor API.\n */\nclass BcsClient {\n  #cache = new Map();\n  #authToken = new BcsAuthToken();\n\n  /**\n   * Returns time stamp of token expiration or 0.\n   *\n   * @returns {number} Unix ts for auth expiration. (milliseconds)\n   */\n  get authExpiresAt() {\n    return this.#authToken.expiresAt;\n  }\n\n  get isLoggedIn() {\n    return Date.now() < this.authExpiresAt;\n  }\n\n  get #authHeader() {\n    return { authToken: this.#authToken };\n  }\n\n  /**\n   * Sends login request to BCS API and updates this.#authToken with the\n   * response. Throws if the login fails.\n   *\n   * @param {string} email\n   * @param {string} password\n   */\n  async login(email, password) {\n    const res = await postJSON(\"/login\", { email, password });\n    if (res.errorCode) {\n      throw new Error(res.errorCode);\n    }\n    this.#authToken.set(res.authenticationInfo.authToken);\n  }\n\n  /**\n   * Remove auth token and clear stored responses.\n   */\n  signOut() {\n    this.#cache.clear();\n    this.#authToken.clear();\n  }\n\n  /**\n   * Return response from cache. Falls back to making request and caches the\n   * result before returning the result.\n   *\n   * @param {string} key cache storage key\n   * @param {function} requestor Async function making the request.\n   * @returns {Promise<*>} Result from requestor.\n   */\n  async #withCache(key, requestor) {\n    let res = this.#cache.get(key);\n    if (!res) {\n      res = await requestor();\n      this.#cache.set(key, res);\n    }\n    return res;\n  }\n\n  /**\n   * Fetch data from /me endpoint\n   *\n   * @returns {Promise<Object>}\n   */\n  me() {\n    return this.#withCache(\"me\", () => getJSON(\"/me\", this.#authHeader));\n  }\n\n  /**\n   * Fetch data from /sessions endpoint.\n   *\n   * @param {number} enrollmentId bcs enrollment id\n   * @returns {Promise<Object>}\n   */\n  sessions(enrollmentId) {\n    return this.#withCache(`sessions/${enrollmentId}`, () =>\n      postJSON(\"/sessions\", { enrollmentId }, this.#authHeader)\n    );\n  }\n\n  /**\n   * Fetch data from /sessionDetail endpoint.\n   *\n   * @param {number} sessionId bcs session id\n   * @returns {Promise<Object>}\n   */\n  sessionDetail(sessionId) {\n    return this.#withCache(`sessionDetail/${sessionId}`, () =>\n      postJSON(\"/sessionDetail\", { sessionId }, this.#authHeader)\n    );\n  }\n\n  /**\n   * Fetch data from /assignments endpoint.\n   *\n   * @param {number} enrollmentId bcs enrollment id\n   * @returns {Promise<Object>}\n   */\n  assignments(enrollmentId) {\n    return this.#withCache(`assignments/${enrollmentId}`, () =>\n      postJSON(\"/assignments\", { enrollmentId }, this.#authHeader)\n    );\n  }\n\n  /**\n   * Fetch data from /assignmentDetail endpoint.\n   *\n   * @param {number} assignmentId bcs assignment id\n   * @returns {Promise<Object>}\n   */\n  assignmentDetail(assignmentId) {\n    return this.#withCache(`assignmentDetail/${assignmentId}`, () =>\n      postJSON(\"/assignmentDetail\", { assignmentId }, this.#authHeader)\n    );\n  }\n}\n\nexport const bcsClient = new BcsClient();\n","import * as idb from \"idb-keyval\";\nimport { bcsClient } from \"./bcsClient\";\nimport pick from \"lodash/pick\";\n\n// clear keyval store which could contain sensitive data from previous version\n// of the client.\nidb\n  .keys()\n  .then((keys) =>\n    keys.filter((key) => /^bcs/.test(key)).forEach((key) => idb.del(key))\n  );\n\nexport const signOut = () => bcsClient.signOut();\n\nexport const isLoggedIn = () => bcsClient.isLoggedIn;\n\nexport const login = async ({ email, password }) => {\n  try {\n    await bcsClient.login(email, password);\n    return { result: true };\n  } catch (error) {\n    signOut();\n    return { error };\n  }\n};\n\nexport const cohorts = async () => {\n  try {\n    if (!bcsClient.isLoggedIn) {\n      throw new Error(\"You must be logged in to access cohorts.\");\n    }\n    const { Enrollments: enrollments } = await bcsClient.me();\n    if (!enrollments) {\n      throw new Error(\"You don't have any cohorts.\");\n    }\n    const result = enrollments.map((enrollment) => {\n      const enrollmentId = enrollment.id;\n      const { name, startDate, endDate, id: courseId } = enrollment.course;\n      return { name, startDate, endDate, courseId, enrollmentId };\n    });\n    return { result };\n  } catch (error) {\n    if (error.code === 401) {\n      error.message = \"You must login.\";\n      signOut();\n    }\n    return { error };\n  }\n};\n\nexport const students = async ({ cohortId }) => {\n  try {\n    if (!bcsClient.isLoggedIn) {\n      throw new Error(\"You must be logged in to access cohorts.\");\n    }\n    const enrollmentId = parseInt(cohortId);\n    const [sessions, assignments] = await Promise.all([\n      bcsClient.sessions(enrollmentId),\n      bcsClient.assignments(enrollmentId),\n    ]);\n    const studentMap = new Map();\n\n    // fetch session details for each session to compile the attendance of each student\n    const academicSess = sessions.calendarSessions\n      .filter((session) => session.context.contextCode === \"academic\")\n      .map((session) => session.session.id);\n\n    const sessionDetails = await Promise.all(\n      academicSess.map((sessionId) => bcsClient.sessionDetail(sessionId))\n    );\n\n    // populate studentAttendance with students and attendance data.\n    sessionDetails.forEach((sessDetails) => {\n      sessDetails.students.forEach((stuDetails) => {\n        const key = stuDetails.student.id;\n        let student = studentMap.get(key);\n        if (!student) {\n          student = pick(stuDetails.student, [\n            \"id\",\n            \"email\",\n            \"firstName\",\n            \"lastName\",\n            \"active\",\n          ]);\n          student.attendance = [];\n          student.totalAbsent = 0;\n          student.excusedAbsent = 0;\n          student.grades = [];\n          studentMap.set(key, student);\n        }\n\n        const attendance = {\n          absent: !!stuDetails.absence,\n          startTime: sessDetails.session.session.startTime,\n          excused: stuDetails.absence?.excused || false,\n        };\n        if (attendance.absent && attendance.excused) {\n          student.excusedAbsent += 1;\n        }\n        if (attendance.absent) {\n          student.totalAbsent += 1;\n        }\n        student.attendance.push(attendance);\n      });\n    });\n\n    // fetch assignment details to compile homework records for each student\n    const requiredAssignmentIds = assignments.calendarAssignments\n      .filter((assignment) => assignment.required)\n      .map((assignment) => assignment.id);\n\n    const assignmentDetails = await Promise.all(\n      requiredAssignmentIds.map((assignmentId) =>\n        bcsClient.assignmentDetail(assignmentId)\n      )\n    );\n\n    assignmentDetails.forEach((assDetail) => {\n      const assignment = pick(assDetail.assignment, [\n        \"id\",\n        \"dueDate\",\n        \"effectiveDueDate\",\n        \"title\",\n      ]);\n      assignment.type = /project/i.test(assignment.title)\n        ? \"project\"\n        : \"homework\";\n\n      assDetail.students.forEach((student) => {\n        const { id } = student.student;\n        const letterGrade = student.grade?.grade;\n        const grade = {\n          assignment,\n          status: letterGrade\n            ? \"graded\"\n            : student.submission\n            ? \"ungraded\"\n            : \"not_submitted\",\n          mark: letterGrade || \"\",\n        };\n        const studentRecord = studentMap.get(id);\n        studentRecord.grades.push(grade);\n      });\n    });\n\n    return { result: studentMap };\n  } catch (error) {\n    return { error };\n  }\n};\n","import { createContext, useContext, useState } from \"react\";\nimport * as bcsService from \"./bcsService\";\n\nconst bcsContext = createContext({\n  isLoggedIn: false,\n  pending: false,\n  signOut: () => {},\n  login: ({ email, password }) => {},\n  cohorts: () => {},\n});\n\nexport function BcsProvider({ children }) {\n  const [state, setState] = useState(() => ({\n    error: \"\",\n    pending: false,\n    isLoggedIn: bcsService.isLoggedIn(),\n  }));\n\n  const signOut = async () => {\n    bcsService.signOut();\n    setState((prevState) => ({ ...prevState, isLoggedIn: false }));\n  };\n\n  const loginError = (error) => {\n    return setState((prevState) => ({\n      ...prevState,\n      pending: false,\n      isLoggedIn: false,\n      error,\n    }));\n  };\n\n  const login = async ({ email, password }) => {\n    setState((prevState) => ({ ...prevState, pending: true }));\n    const { error } = await bcsService.login({ email, password });\n    if (error?.message === \"INVALID_CREDENTIALS\") {\n      return loginError(\"Invalid username or password\");\n    }\n    if (error) {\n      return loginError(\"An unexpected error occurred. Please try again.\");\n    }\n    setState((prevState) => ({\n      ...prevState,\n      pending: false,\n      isLoggedIn: true,\n      error: \"\",\n    }));\n  };\n\n  return (\n    <bcsContext.Provider value={{ ...state, login, signOut }}>\n      {children}\n    </bcsContext.Provider>\n  );\n}\n\nexport const useBcs = () => useContext(bcsContext);\n\nconst useAsyncRequestor = (requestor) => {\n  const [state, setState] = useState({\n    pending: false,\n    result: null,\n    error: null,\n    isLoaded: false,\n  });\n  const load = async () => {\n    if (state.isLoaded || state.pending) return;\n    setState((prevState) => ({ ...prevState, pending: true }));\n    const { result, error } = await requestor();\n    setState({ result, error, pending: false, isLoaded: true });\n  };\n  return { ...state, load };\n};\n\nexport const useCohorts = () => useAsyncRequestor(bcsService.cohorts);\n\nexport const useStudents = (cohortId) =>\n  useAsyncRequestor(() => bcsService.students({ cohortId }));\n","// removes falsy values from an array\nexport const compactArray = (arr) => arr.filter((val) => val);\n","import { compactArray } from \"./arrayUtil\";\n\nexport const classNamesFromArray = (arr) => compactArray(arr).join(\" \");\n","function Loader({ children }) {\n  return (\n    <div className=\"d-flex h-100 w-100 justify-content-center align-items-center flex-column\">\n      <div\n        style={{ width: \"3.5rem\", height: \"3.5rem\" }}\n        className=\"spinner-border text-secondary mb-4\"\n        role=\"status\"\n      ></div>\n      <p className=\"lead\">{children}</p>\n    </div>\n  );\n}\n\nexport default Loader;\n","import { classNamesFromArray } from \"../util\";\n\nfunction OffCanvas({ show, style, title, onClose, children }) {\n  const modalClassName = classNamesFromArray([\n    \"offcanvas\",\n    \"offcanvas-end\",\n    show && \"show\",\n  ]);\n\n  return (\n    <section\n      aria-live=\"polite\"\n      className={modalClassName}\n      tabIndex={-1}\n      id=\"offCanvas\"\n      aria-labelledby=\"offCanvasLabel\"\n      style={{ visibility: show ? \"visible\" : \"hidden\", ...style }}\n    >\n      <Header onClose={onClose}>{title}</Header>\n      <Body>{children}</Body>\n    </section>\n  );\n}\n\nfunction Header({ onClose, children }) {\n  return (\n    <div className=\"offcanvas-header\">\n      <h5 className=\"offcanvas-title\" id=\"offCanvasLabel\">\n        {children}\n      </h5>\n      <CloseButton onClose={onClose} />\n    </div>\n  );\n}\n\nfunction Body({ children }) {\n  return <div className=\"offcanvas-body small\">{children}</div>;\n}\n\nfunction CloseButton({ onClose }) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn-close text-reset\"\n      aria-label=\"Close\"\n      onClick={onClose}\n    />\n  );\n}\n\nexport default OffCanvas;\n","import { useState } from \"react\";\nimport { ReactComponent as SortUp } from \"bootstrap-icons/icons/sort-up.svg\";\nimport { ReactComponent as SortDown } from \"bootstrap-icons/icons/sort-down.svg\";\nimport sortBy from \"lodash/sortBy\";\n\nfunction StudentTable({ students, onSelectStudent, onHelp }) {\n  return (\n    <Table\n      students={students}\n      onSelectStudent={onSelectStudent}\n      onHelp={onHelp}\n    />\n  );\n}\n\nfunction Table({ students, onSelectStudent, onHelp }) {\n  const [{ sortCol, sortOrder }, setSortState] = useState({\n    sortCol: \"name\",\n    sortOrder: 1,\n  });\n\n  // _.sortBy creates a new array\n  const sortedStudents = sortBy(students, sortCol);\n\n  if (sortOrder === -1) {\n    sortedStudents.reverse();\n  }\n\n  const handleToggleSort = (fieldName) => {\n    setSortState((current) => ({\n      sortCol: fieldName,\n      sortOrder:\n        // flip sort order only when fieldName is the current sortCol. Sort in\n        // ASC order when the sortCol changes.\n        current.sortCol === fieldName ? current.sortOrder * -1 : 1,\n    }));\n  };\n\n  return (\n    <table\n      className=\"table table-sm table-hover mt-5 caption-top mx-auto\"\n      style={{ maxWidth: \"45rem\" }}\n    >\n      <caption>\n        Click on a student to view additional details.{\" \"}\n        <button\n          style={{ verticalAlign: \"inherit\", padding: 0, cursor: \"help\" }}\n          className=\"btn btn-link\"\n          onClick={onHelp}\n        >\n          help\n        </button>\n      </caption>\n      <TableHeader\n        sortCol={sortCol}\n        sortOrder={sortOrder}\n        onToggleSort={handleToggleSort}\n      />\n      <tbody>\n        {sortedStudents.map((student) => (\n          <StudentTableRow\n            key={student.id}\n            student={student}\n            onSelectStudent={onSelectStudent}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nconst headingConfig = [\n  {\n    label: \"Name\",\n    fieldName: \"name\",\n  },\n  {\n    label: \"Absent\",\n    fieldName: \"totalAbsent\",\n  },\n  {\n    label: \"Incomplete\",\n    fieldName: \"totalIncomplete\",\n  },\n  {\n    label: \"Not Submitted\",\n    fieldName: \"totalNotSubmitted\",\n  },\n  {\n    label: \"Missed HW\",\n    fieldName: \"totalMissedHW\",\n  },\n  {\n    label: \"Ungraded\",\n    fieldName: \"totalUngraded\",\n  },\n];\n\nfunction TableHeader({ sortCol, sortOrder, onToggleSort }) {\n  return (\n    <thead>\n      <tr>\n        {headingConfig.map((headingProps) => (\n          <TableHeading\n            key={headingProps.fieldName}\n            sortCol={sortCol}\n            sortOrder={sortOrder}\n            onToggleSort={onToggleSort}\n            {...headingProps}\n          />\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nfunction TableHeading({ sortOrder, sortCol, label, fieldName, onToggleSort }) {\n  // use null when not the actively sorted column. WAI-ARIA states that \"authors\n  // SHOULD apply aria-sort to only one header at a time\".\n  // (https://www.digitala11y.com/aria-sort-properties/)\n  const ariaSort =\n    sortCol !== fieldName ? null : sortOrder === 1 ? \"ascending\" : \"descending\";\n\n  return (\n    <th scope=\"col\" aria-sort={ariaSort}>\n      <span\n        tabIndex={0}\n        role=\"button\"\n        onClick={() => onToggleSort(fieldName)}\n        onKeyUp={(e) => e.key === \"Enter\" && onToggleSort(fieldName)}\n        style={{ cursor: \"pointer\" }}\n      >\n        {label} <SortIcon sortOrder={sortOrder} show={sortCol === fieldName} />\n      </span>\n    </th>\n  );\n}\n\nfunction SortIcon({ sortOrder, show }) {\n  const style = { visibility: show ? \"visible\" : \"hidden\" };\n  const Icon = sortOrder === 1 ? SortDown : SortUp;\n  return <Icon aria-label=\"toggle sort\" style={style} />;\n}\n\nfunction StudentTableRow({ student, onSelectStudent }) {\n  const {\n    id,\n    name,\n    totalAbsent,\n    totalIncomplete,\n    totalNotSubmitted,\n    totalUngraded,\n    totalMissedHW,\n    status,\n  } = student;\n\n  const trClassName =\n    status === \"ok\"\n      ? \"\"\n      : status === \"incomplete\"\n      ? \"table-danger\"\n      : \"table-warning\";\n\n  return (\n    <tr\n      role=\"button\"\n      className={trClassName}\n      onClick={() => onSelectStudent(id)}\n      onKeyUp={(e) => e.key === \"Enter\" && onSelectStudent(id)}\n      tabIndex={0}\n    >\n      <td>{name}</td>\n      <td>{totalAbsent}</td>\n      <td>{totalIncomplete}</td>\n      <td>{totalNotSubmitted}</td>\n      <td>{totalMissedHW}</td>\n      <td>{totalUngraded}</td>\n    </tr>\n  );\n}\n\nexport default StudentTable;\n","import formatDate from \"@bitty/format-date\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useStudents } from \"../bcs\";\nimport { classNamesFromArray, compactArray } from \"../util\";\nimport Loader from \"./Loader\";\nimport OffCanvas from \"./OffCanvas\";\nimport Table from \"./StudentTable\";\n\nconst MAX_ABSENCES = 5;\n\nconst totalGrades = (grades) => {\n  let totalIncomplete = 0;\n  let totalNotSubmitted = 0;\n  let totalUngraded = 0;\n  grades\n    .filter(\n      (grade) => Date.parse(grade.assignment.effectiveDueDate) < Date.now()\n    )\n    .forEach((grade) => {\n      if (grade.status === \"graded\" && grade.mark !== \"I\") {\n        return;\n      }\n      if (grade.mark === \"I\") {\n        totalIncomplete += 1;\n        return;\n      }\n      if (grade.status === \"not_submitted\") {\n        totalNotSubmitted += 1;\n        return;\n      }\n      totalUngraded += 1;\n    });\n  const totalMissedHW = totalIncomplete + totalNotSubmitted;\n  return { totalIncomplete, totalNotSubmitted, totalUngraded, totalMissedHW };\n};\n\nfunction Overview() {\n  const { enrollmentId } = useParams();\n  const [offCanvasState, setOffCanvasState] = useState({\n    show: false,\n    title: \"\",\n    children: null,\n  });\n  const students = useStudents(enrollmentId);\n\n  useEffect(() => {\n    students.load();\n  }, [students]);\n\n  if (students.error) {\n    return <p>{students.error}</p>;\n  }\n  if (students.pending || !students.isLoaded) {\n    return <Loader>Loading student data...</Loader>;\n  }\n\n  const hideOffCanvas = () =>\n    setOffCanvasState((prevState) => ({ ...prevState, show: false }));\n\n  const handleHelp = () => {\n    setOffCanvasState({\n      show: true,\n      title: \"Dashboard Help\",\n      children: <DashboardHelp />,\n    });\n  };\n\n  const handleSelectStudent = (studentId) => {\n    const student = students.result.get(studentId);\n    setOffCanvasState({\n      show: true,\n      title: `${student.firstName} ${student.lastName}`,\n      children: <StudentDetails student={student} />,\n    });\n  };\n\n  return (\n    <>\n      <Table\n        onHelp={handleHelp}\n        onSelectStudent={handleSelectStudent}\n        students={Array.from(students.result.values()).map((student) => {\n          const { firstName, lastName, totalAbsent, id } = student;\n          const name = `${firstName} ${lastName}`;\n          const {\n            totalIncomplete,\n            totalNotSubmitted,\n            totalUngraded,\n            totalMissedHW,\n          } = totalGrades(student.grades);\n\n          let status;\n          if (totalAbsent > MAX_ABSENCES || totalMissedHW > 2) {\n            status = \"incomplete\";\n          } else if (totalAbsent > MAX_ABSENCES - 1 || totalMissedHW > 1) {\n            status = \"warning\";\n          } else {\n            status = \"ok\";\n          }\n\n          return {\n            id,\n            name,\n            totalAbsent,\n            totalIncomplete,\n            totalNotSubmitted,\n            totalUngraded,\n            totalMissedHW,\n            status,\n          };\n        })}\n      />\n      <OffCanvas onClose={hideOffCanvas} {...offCanvasState} />\n    </>\n  );\n}\n\nfunction DashboardHelp() {\n  return (\n    <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item\">\n        Students failing to meet completion requirements are highlighted in\n        pink.\n      </li>\n      <li className=\"list-group-item\">\n        Students at risk of failing to meet completion requirements are\n        highlighted in yellow.\n      </li>\n    </ul>\n  );\n}\n\nfunction StudentDetails({ student }) {\n  return (\n    <>\n      <AbsencesSection attendance={student.attendance} />\n      <HomeworkIssuesSection grades={student.grades} />\n    </>\n  );\n}\n\nfunction AbsencesSection({ attendance }) {\n  const absentSess = attendance.filter((sess) => sess.absent);\n  return (\n    <>\n      <h6>Absences</h6>\n      {\n        <ul className=\"list-group list-group-flush\">\n          {absentSess.length === 0 && <p>None</p>}\n          {absentSess.map((sess) => (\n            <li key={sess.startTime} className=\"list-group-item\">\n              {formatDate(new Date(sess.startTime), \"M/D/YYYY\")}{\" \"}\n              {sess.excused && \"excused\"}\n            </li>\n          ))}\n        </ul>\n      }\n    </>\n  );\n}\n\nfunction HomeworkIssuesSection({ grades }) {\n  const isIssue = (grade) =>\n    (grade.status !== \"graded\" || grade.mark === \"I\") &&\n    Date.parse(grade.assignment.effectiveDueDate) < Date.now();\n\n  const listItems = compactArray(\n    grades.filter(isIssue).map((grade) => {\n      return <HomeworkIssueItem key={grade.assignment.title} grade={grade} />;\n    })\n  );\n  return (\n    <>\n      <h6 className=\"mt-3\">Homework Issues</h6>\n      {listItems.length === 0 ? (\n        <p>None</p>\n      ) : (\n        <ul className=\"list-group list-group-flush\">{listItems}</ul>\n      )}\n    </>\n  );\n}\n\nfunction HomeworkIssueItem({ grade }) {\n  const { mark, status } = grade;\n  const { title } = grade.assignment;\n\n  let statusText = \"not submitted\";\n  let statusColor = \"danger\";\n  if (mark === \"I\") {\n    statusText = \"incomplete\";\n  } else if (status === \"ungraded\") {\n    statusText = \"ungraded\";\n    statusColor = \"warning\";\n  }\n\n  const badgeClassName = classNamesFromArray([\n    \"badge\",\n    `bg-${statusColor}`,\n    statusColor === \"warning\" && \"text-dark\",\n  ]);\n\n  return (\n    <li className=\"list-group-item d-flex align-items-center\">\n      <div style={{ minWidth: 90 }}>\n        <span className={badgeClassName}>{statusText}</span>\n      </div>\n      <div className=\"ps-2\">{title}</div>\n    </li>\n  );\n}\n\nexport default Overview;\n","import { useEffect } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useCohorts } from \"../bcs\";\nimport Loader from \"./Loader\";\n\nfunction Cohorts() {\n  const cohorts = useCohorts();\n  useEffect(() => {\n    cohorts.load();\n  }, [cohorts]);\n\n  if (cohorts.pending || !cohorts.isLoaded) {\n    return <Loader>Loading cohorts...</Loader>;\n  }\n  if (cohorts.error) {\n    return <p>Error loading cohorts. {cohorts.error.message}</p>;\n  }\n  if (cohorts.result.length === 0) {\n    return <p>You don't have any cohorts.</p>;\n  }\n  if (cohorts.result.length === 1) {\n    return <Redirect to={`/${cohorts.result[0].enrollmentId}`} />;\n  }\n  return (\n    <>\n      <h1>Please choose a cohort</h1>\n      {cohorts.result.map(({ name, enrollmentId }) => (\n        <Link\n          key={enrollmentId}\n          to={`/${enrollmentId}`}\n          className=\"btn btn-outline-secondary\"\n        >\n          {name}\n        </Link>\n      ))}{\" \"}\n    </>\n  );\n}\n\nexport default Cohorts;\n","import { Switch, Route } from \"react-router\";\nimport Overview from \"./Overview\";\nimport Cohorts from \"./Cohorts\";\n\nfunction Dashboard() {\n  return (\n    <div className=\"container-fluid h-100 w-100\">\n      <Switch>\n        <Route path=\"/:enrollmentId\">\n          <Overview />\n        </Route>\n        <Route path=\"/\">\n          <Cohorts />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import Dashboard from \"./Dashboard\";\nexport default Dashboard;\n","import { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport * as idb from \"idb-keyval\";\nimport { useBcs } from \"./bcs\";\n\nconst rememberEmail = (email) => idb.set(\"login:email\", email);\nconst clearEmail = () => idb.del(\"login:email\");\nconst getEmail = () => idb.get(\"login:email\");\n\n// Based on https://reactrouter.com/web/example/auth-workflow. The login form\n// will redirect back to the page the use tried to access after a successful\n// login. Falls back to \"/\" if there is no history yet.\nfunction Login() {\n  const history = useHistory();\n  const location = useLocation();\n  const { login, isLoggedIn, pending, error } = useBcs();\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n    remember: false,\n    dirty: false,\n  });\n\n  // Redirect if the user is logged in.\n  useEffect(() => {\n    if (isLoggedIn) {\n      // Get path the user came from (see ProtectedRoute). Fallback to \"/\"\n      const from = { pathname: location.state?.from?.pathname || \"/\" };\n      history.replace(from);\n    }\n  }, [isLoggedIn, history, location]);\n\n  // initialize email from storage\n  useEffect(() => {\n    getEmail().then((email) =>\n      setFormState((prevState) => ({\n        ...prevState,\n        remember: !!email,\n        email: email || \"\",\n      }))\n    );\n  }, []);\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormState((prevState) => ({\n      ...prevState,\n      dirty: true,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  };\n\n  const isFormValid = () => {\n    const { email, password, dirty } = formState;\n    return email.trim() && password.trim() && dirty;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { email, password, remember } = formState;\n    const bcsCredentials = {\n      email: email.trim(),\n      password: password.trim(),\n    };\n    setFormState((prevState) => ({ ...prevState, dirty: false }));\n    if (remember) {\n      await rememberEmail(bcsCredentials.email);\n    } else {\n      await clearEmail();\n    }\n    login(bcsCredentials);\n  };\n\n  return (\n    <main\n      style={{ maxWidth: 330 }}\n      className=\"w-100 py-5 mx-auto h-100 d-flex align-items-center\"\n    >\n      <form onSubmit={handleSubmit}>\n        <Heading />\n        <FormControl\n          label=\"Email address\"\n          type=\"email\"\n          controlId=\"email\"\n          style={{\n            marginBottom: -1,\n            borderBottomRightRadius: 0,\n            borderBottomLeftRadius: 0,\n          }}\n          value={formState.email}\n          onChange={handleInputChange}\n          disabled={pending}\n        />\n        <FormControl\n          label=\"Password\"\n          type=\"password\"\n          controlId=\"password\"\n          style={{\n            borderTopRightRadius: 0,\n            borderTopLeftRadius: 0,\n          }}\n          value={formState.password}\n          onChange={handleInputChange}\n          disabled={pending}\n        />\n        <RememberMeControl\n          controlId=\"remember\"\n          checked={formState.remember}\n          onChange={handleInputChange}\n          disabled={pending}\n        />\n        <SubmitButton disabled={!isFormValid() || pending} pending={pending} />\n        <Alert show={error && !formState.dirty}>{error}</Alert>\n      </form>\n    </main>\n  );\n}\n\nfunction Heading() {\n  return (\n    <h1 className=\"h5 mb-3 fw-normal\">\n      Please sign in with your BCS Credentials\n    </h1>\n  );\n}\n\nfunction FormControl({ label, controlId, ...inputProps }) {\n  return (\n    <div className=\"form-floating\">\n      <input\n        name={controlId}\n        id={controlId}\n        className=\"form-control\"\n        {...inputProps}\n      />\n      <label htmlFor={controlId}>{label}</label>\n    </div>\n  );\n}\n\nfunction RememberMeControl({ controlId, ...inputProps }) {\n  return (\n    <div className=\"my-3 text-center\">\n      <label>\n        <input name={controlId} type=\"checkbox\" {...inputProps} /> Remember me\n      </label>\n    </div>\n  );\n}\n\n// Alert uses css transition to grow/shrink on Y axis.\nfunction Alert({ children, show }) {\n  return (\n    <div\n      className=\"mt-3\"\n      style={{\n        maxHeight: show ? 100 : 0,\n        transition: `max-height ease 400ms`,\n        overflow: \"hidden\",\n        height: \"auto\",\n      }}\n    >\n      <div className=\"alert alert-danger\" role=\"alert\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\nfunction SubmitButton({ pending, ...btnProps }) {\n  return (\n    <button\n      type=\"submit\"\n      className=\"w-100 btn btn-lg btn-primary\"\n      {...btnProps}\n    >\n      {pending ? <ButtonSpinner>Logging in...</ButtonSpinner> : \"Submit\"}\n    </button>\n  );\n}\n\nfunction ButtonSpinner({ children }) {\n  return (\n    <>\n      <span\n        className=\"spinner-border spinner-border-sm me-3\"\n        role=\"status\"\n        aria-hidden=\"true\"\n      />\n      {children}\n    </>\n  );\n}\n\nexport default Login;\n","import { Route, Redirect } from \"react-router-dom\";\nimport { useBcs } from \"./bcs\";\nfunction PrivateRoute({ children, ...rest }) {\n  const { isLoggedIn } = useBcs();\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isLoggedIn ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n","import { Link } from \"react-router-dom\";\nimport { useBcs } from \"./bcs\";\n\nfunction TopBar() {\n  const { isLoggedIn, signOut } = useBcs();\n  return (\n    <header className=\"navbar navbar-expand navbar-dark bg-dark shadow\">\n      <Link className=\"navbar-brand px-3\" to=\"/\">\n        Instructor Dashboard\n      </Link>\n      <div className=\"navbar-nav px-3 ms-auto\">\n        <div className=\"nav-item\">\n          {isLoggedIn && (\n            <button className=\"nav-link bg-dark btn\" onClick={signOut}>\n              Sign out\n            </button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default TopBar;\n","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { BcsProvider } from \"./bcs\";\nimport Dashboard from \"./Dashboard\";\nimport Login from \"./Login\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport TopBar from \"./TopBar\";\n\nfunction App() {\n  return (\n    <BcsProvider>\n      <Router basename={process.env.PUBLIC_URL}>\n        <TopBar />\n        <Switch>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <PrivateRoute path=\"/\">\n            <Dashboard />\n          </PrivateRoute>\n        </Switch>\n      </Router>\n    </BcsProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}